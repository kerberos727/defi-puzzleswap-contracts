{-# STDLIB_VERSION 6 #-}
{-# SCRIPT_TYPE ACCOUNT #-}
{-# CONTENT_TYPE DAPP #-}

let usdnId = base58'DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p'

let usdnIdStr = "DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p"

let puzzleId = base58'HEB8Qaw9xrWpWs8tHsiATYGBWDBtP2S7kcPALrMu43AS'

let Scale = 1000000000000

func tryGetInteger (key: String) = match getInteger(this, key) {
    case b: Int => 
        b
    case _ => 
        0
}


func tryGetString (key: String) = match getString(this, key) {
    case a: String => 
        a
    case _ => 
        ""
}


func claimAliasResult (address: Address, assetIdStr: String) = {
    let addressStr = toString(address)
    let currentInterest = tryGetInteger((("global_lastCheck_" + assetIdStr) + "_interest"))
    let lastCheckInterest = tryGetInteger((((addressStr + "_lastCheck_") + assetIdStr) + "_interest"))
    let stakedAmount = if ((assetIdStr == usdnIdStr))
        then tryGetInteger((addressStr + "_staked"))
        else tryGetInteger((((addressStr + "_") + assetIdStr) + "_staked"))
    let reward = if ((lastCheckInterest > 0))
        then fraction((currentInterest - lastCheckInterest), stakedAmount, Scale)
        else 0
[IntegerEntry((((addressStr + "_lastCheck_") + assetIdStr) + "_interest"), currentInterest), IntegerEntry((((addressStr + "_") + assetIdStr) + "_claimed"), (tryGetInteger((((addressStr + "_") + assetIdStr) + "_claimed")) + reward)), IntegerEntry((((addressStr + "_") + assetIdStr) + "_lastClaim"), lastBlock.timestamp), ScriptTransfer(address, reward, usdnId)]
    }


func claimResult (address: Address) = (claimAliasResult(address, usdnIdStr) ++ claimAliasResult(address, "ultra"))


func checkNFTValidity (assetIdStr: String) = false


@Callable(i)
func stake () = {
    let amount = i.payments[0].amount
    let addressStr = toString(i.caller)
    let assetIdStr = toBase58String(usdnId)
    let currentInterest = tryGetInteger((("global_lastCheck_" + assetIdStr) + "_interest"))
    let totalStakedAmount = tryGetInteger("global_staked")
    if ((i.payments[0].assetId != puzzleId))
        then throw("wrong asset attached")
        else (claimResult(i.caller) ++ [IntegerEntry("global_staked", (totalStakedAmount + amount)), IntegerEntry((addressStr + "_staked"), (tryGetInteger((addressStr + "_staked")) + amount))])
    }



@Callable(i)
func ultraStake () = {
    let addressStr = toString(i.caller)
    let storedNftIdStr = tryGetString((addressStr + "_ultra_assetId"))
    let nftIdStr = if ((storedNftIdStr != ""))
        then storedNftIdStr
        else toBase58String(value(i.payments[0].assetId))
    let addressStakeAmount = tryGetInteger((addressStr + "_staked"))
    let ultraStakeAmount = (addressStakeAmount * 1)
    let totalUltraStakedAmount = tryGetInteger("global_ultra_staked")
    if ((addressStakeAmount == 0))
        then throw("you need to have at least one PUZZLE token staked")
        else if (!(checkNFTValidity(nftIdStr)))
            then throw("wrong asset attached")
            else (claimResult(i.caller) ++ [StringEntry((addressStr + "_ultra_assetId"), nftIdStr), IntegerEntry("global_ultra_staked", (totalUltraStakedAmount + ultraStakeAmount)), IntegerEntry((addressStr + "_ultra_staked"), (tryGetInteger((addressStr + "_ultra_staked")) + ultraStakeAmount))])
    }



@Callable(i)
func ultraUnStake () = {
    let addressStr = toString(i.caller)
    let addressStakeAmount = tryGetInteger((addressStr + "_staked"))
    let ultraStakeAmount = tryGetInteger((addressStr + "_ultra_staked"))
    let totalUltraStakedAmount = tryGetInteger("global_ultra_staked")
    let nftIdStr = tryGetString((addressStr + "_ultra_assetId"))
    if ((nftIdStr == ""))
        then throw("you don't have NFT staked")
        else if (!(checkNFTValidity(nftIdStr)))
            then throw("staked NFT is unverified")
            else (claimResult(i.caller) ++ [StringEntry((addressStr + "_ultra_assetId"), ""), IntegerEntry("global_ultra_staked", (totalUltraStakedAmount - ultraStakeAmount)), IntegerEntry((addressStr + "_ultra_staked"), 0), ScriptTransfer(i.caller, 1, fromBase58String(nftIdStr))])
    }



@Callable(i)
func unStake(amount: Int) = {
    let addressStr = toString(i.caller)
    let stakedAmount = tryGetInteger((addressStr + "_staked"))
    if ((amount > stakedAmount))
        then throw("you don't have tokens available")
        else (claimResult(i.caller) ++ [IntegerEntry((addressStr + "_staked"), (stakedAmount - amount)), IntegerEntry("global_staked", (tryGetInteger("global_staked") - amount)), ScriptTransfer(i.caller, amount, puzzleId)])
    }



@Callable(i)
func claimReward () = claimResult(i.caller)



@Callable(i)
func topUpReward () = {
    let amount = fraction(i.payments[0].amount, 9, 10)
    let ultraAmount = (i.payments[0].amount - amount)
    let assetIdStr = toBase58String(usdnId)
    let currentInterest = tryGetInteger((("global_lastCheck_" + assetIdStr) + "_interest"))
    let totalStakedAmount = tryGetInteger("global_staked")
    let interestDelta = if ((totalStakedAmount > 0))
        then fraction(amount, Scale, totalStakedAmount)
        else 0
    let currentUltraInterest = tryGetInteger("global_lastCheck_ultra_interest")
    let totalUltraStakedAmount = tryGetInteger("global_ultra_staked")
    let ultraInterestDelta = if ((totalStakedAmount > 0))
        then fraction(amount, Scale, totalStakedAmount)
        else 0
    if ((i.payments[0].assetId != usdnId))
        then throw("wrong asset attached")
        else (
          [IntegerEntry((("global_" + assetIdStr) + "_earnings"), (tryGetInteger((("global_" + assetIdStr) + "_earnings")) + amount)), IntegerEntry((("global_lastCheck_" + assetIdStr) + "_interest"), (currentInterest + interestDelta)), IntegerEntry("global_ultra_earnings", (tryGetInteger("global_ultra_earnings") + ultraAmount)), IntegerEntry("global_lastCheck_ultra_interest", (currentUltraInterest + ultraInterestDelta))], amount)
    }


@Verifier(tx)
func verify () = sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)

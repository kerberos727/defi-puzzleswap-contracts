{-# STDLIB_VERSION 5 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let usdnIdStr = "DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p"
let usdnId = base58'DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p'

func tryGetString(key: String) = {
  match getString(this, key) {
    case b:String => b
    case _ => ""
  }
}

func getAssetString(assetId: ByteVector|Unit) = {
  match assetId {
    case b:ByteVector => b.toBase58String()
    case _ => "WAVES"
  }
}

func getAssetBytes(assetIdStr: String) = {
  if (assetIdStr == "WAVES") then {unit} else {assetIdStr.fromBase58String()}
}

func getBalance(assetId: ByteVector|Unit) = {
  match assetId {
    case x: Unit => wavesBalance(this).available
    case _ => assetBalance(this, assetId.value())
  }
}

func swapInternal(i: Invocation, routesStr: String, minToReceive: Int, refKey: String) = {
  func doSwap(amount: Int, swap: String) = {
    let swapLi = swap.split(",")
    let (dApp, dAppType, t0Str, t1Str) = (swapLi[0], swapLi[1], swapLi[2], swapLi[3])

    let t0 = getAssetBytes(t0Str)

    let amount0 = if( amount != 0 ) then amount else getBalance(t0)

    strict i1 = if (dAppType == "swopfi") then {
      invoke(Address(dApp.fromBase58String()),"exchange",[1],[AttachedPayment(t0, amount0)]) 
    } else {
      invoke(Address(dApp.fromBase58String()),"swap",[t1Str, 0],[AttachedPayment(t0, amount0)]) 
    }

    0
  }

  func doRoute(accum: Int, route: String) = {
    let amountIn = route.split("/")[0].parseIntValue()
    let swaps = route.split("/")[1].split(";")
    strict swapsResult = FOLD<3>(swaps, amountIn, doSwap)
    accum + swapsResult
  }

  let asset1Str = routesStr.split(",")[routesStr.split(",").size() - 1]
  let asset1 = asset1Str.getAssetBytes()
  
  let routes = routesStr.split("|")

  strict swaps = FOLD<5>(routes, 0, doRoute)
  let totalOut = getBalance(asset1)
  let feeAmount = fraction(totalOut, 29, 10000)
  let cleanTotalAmount = totalOut - feeAmount

  if (cleanTotalAmount < minToReceive) then {throw("amount to receive is lower than expected one " + cleanTotalAmount.toString())} else

  

  strict usdnFee = if (asset1 == usdnId) then {
    feeAmount
  } else {
    let poolAddressStr = tryGetString("static_asset_"+asset1Str+"_puzzlePool")
    if (poolAddressStr == "") then {0} else {
      strict usdnBalanceBefore = getBalance(usdnId)
      strict convertedFee = invoke(addressFromStringValue(poolAddressStr),"swap",[usdnIdStr,0],[AttachedPayment(asset1, feeAmount)])
      strict usdnBalanceAfter = getBalance(usdnId)

      usdnBalanceAfter - usdnBalanceBefore
    }
  }

  let referralAddress = 
  if (refKey == "muna") then {Address(base58'3PGFHzVGT4NTigwCKP1NcwoXkodVZwvBuuU')}
  else if (refKey == "keeper") then {Address(base58'3PNgw6Db2TGUQbjnV7ekve6q126xBC1e7eM')} 
  else if (refKey == "tci") then {Address(base58'3P93R2GBkTGVehRPhytHr7sdxYww93jkbhm')} 
  else {Address(base58'3PQxXXiQXpWsjDwQLYxyuoPiaLnVHjJguFo')}
  let refUsdnShare = if(refKey =="noref") then 0 else fraction(usdnFee, 2, 10)

  strict topUp = invoke(Address(base58'3PKUxbZaSYfsR7wu2HaAgiirHYwAMupDrYW'),"topUpReward",[],[AttachedPayment(usdnId,usdnFee - refUsdnShare)])

  let asset0 = i.payments[0].assetId
  let amount0 = getBalance(asset0) - if( asset0 == usdnId ) then refUsdnShare else 0
  let amount1 = getBalance(asset1) - if( asset1 == usdnId ) then refUsdnShare else 0

  [
    ScriptTransfer(i.caller, amount1, asset1)
  ]
  ++
  (if( refUsdnShare != 0 ) then [ScriptTransfer(referralAddress, refUsdnShare, usdnId)] else [])
  ++
  (if( amount0 != 0 ) then [ScriptTransfer(i.caller, amount0, asset0)] else [])
}

@Callable(i)
func swap(routesStr: String, minToReceive: Int) = {
  swapInternal(i, routesStr, minToReceive, "noref")  
}


@Callable(i)
func swapWithReferral(routesStr: String, minToReceive: Int, refKey: String) = {
  swapInternal(i, routesStr, minToReceive, refKey)
}

@Callable(i)
func addTokenPuzzlePool(assetIdStr: String, poolAddressStr: String) = {
  if (i.caller != Address(base58'3P8qVX189qpoTJZQQQdKS9endHK5sxWsvrd')) then {throw("admin only")}
  else {
    [
      StringEntry("static_asset_"+assetIdStr+"_puzzlePool", poolAddressStr)
    ]
  }
}



@Verifier(tx)
func verify() = sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
